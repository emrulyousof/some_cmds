/** 
*$export EDITOR=$(which vim)
*comment
*
*$command FLAGS/OPTIONS/SUBCOMMANDS/ARGUMENTS  # Basic structure of commands
*
*#Flags start with a single dash and are followed by a single letter. For example, if you want to view the contents of a directory in long format you can use ls -l. 
*#The longer form starts with two dashes and is then followed by an entire word. For example, "chef --help" Flags are almost always optional and can be specified in any order
*
*#Options are like flags but require a value to follow them. An example is the user name or password you provide when you bootstrap a Chef node with the knife command, 
*#"knife bootstrap ipaddress --user USERNAME --ssh-password PASSWORD" Options are almost always optional and can be specified in any order
*
*#Some commands require additional commands, called subcommands, that refine the focus of the original command. One example is "git status" which uses the git command and the status 
*#subcommand to ask for status. Commands may require multiple subcommands to increasingly refine their scope. These subcommands must be provided in a specific order
*
*#Some commands may allow for optional arguments or require them to be specified. An example is the ls command. When a valid path is provided as an argument, such as ls ~, 
*#the files within that directory are displayed. These arguments are often required and must be provided in a specific order.
*
*The yum command line utility is a package management program for those linux distributions that uses the RPM packages
*
*
*/

**************Installing and managing software**********************
#yum commands
$yum search string   # Search for string
$yum info <package_name>    # Display info
$yum install -y <package_name>   # The -y option answers yes to all the prompt
$yum remove <package_name> 

#RPM commands
$rpm -qa   # Lists all the installed packages
$rpm -qf </path/to/file>   # Will will link the file to the package it belongs to 
$rpm -ql <package_name>    # Will list all the files that belongs to that particular package
$rpm -ivh <package_file.rpm>   # to install a package 
$rpm -e <package_name>    #to erase or uninstall a package 

#APT commands for debian
$apt-cache search string 
$apt-get install -y <package_name>
$apt-get remove package   #removes package leaving configuration 
$apt-get purge  #removes package deleting configuration
$apt-cache show <package_name>    # To show information about a particular package

#DPKG commands to interact with a package manager debian distributions
$dpkg -l   #lists installed packages
$dpkg -S </path/to/file>   # Will display a package that the file belongs to
$dpkg -L <package_name>    # List all the files in a package
$dpkg -i <package_name.deb>     # Installs a package



##Changing shell
$chsh #interactive
$chsh -s /path/to/shell #Non interactive the -s option sets the value

##All about Alias
$alias invent="cd Desktop;mkdir dir1;touch file1;date;cal"
$invent #to execute the alias command invent
$unalias <aliaName> #Deletes an alias 
$alias #shows all the alias that exists on your system
##To make an alias persistent add it to the .bashrc file under some more ls alias section in the home dir

#Generating a file content with cat*************************
cat >(filename) <<EOL
>type
>here
EOL 

#Sudoers file
##Sudoers allows particular users to run various commands as the root user, without needing the root password
##By default the sudoers file is configured in Centos7 to allow all members all users who are members of the wheel group to use sudo to do anything that root can do
##Wheel group allows people in group wheel to run all commands
##Sudoers file could specify individual users can run what software on which machines 
##(the sudoers file can be shared between multiple systems) but by default centos has is it set up to where you simply just add a user to the wheel group and you're all set

#The Hisstory 
$history #show all the command you executed on the system
$!<command_number> #executes the command by typing in the corresponding number to the command displayed by the history command output
$history <10 || any number> #Displays the give number of commands previously executed. 
$vi ~/.bash_history #can manipulate the history file 
$mv .bash_history bash_history #making the history file visible from hidden by removing the dot preceeding the filename
$history -c #This will clear your history

##Opening a pdf file 
$xdg-open <path/to/pdfFilename>

#Navigating the linus system and creating files and directory 
$cd / #root directory
$cd ~ #home directory
$cd - #takes you back to the last accessed directory
$cd .. #changes to the parent directory of the current directory
$ls   #showing you what is in that directory
$less #to page the content of a file or standard output
$mkdir
$rmdir
$touch #to create a empty file or to update the timestamp of a file
$rm -r 
$rm
$cat #&& ; \
$sudo #gives you super user previleges
$cat dmesg | less
$cat dmesg | grep VGA #the grep command search for only the keyword and prints it out
$grep <keyword> /path/to/file
$mv <filename> </where/to/path> #like cut in windows moves the file into new location and removes the original
$cp <filename> </where/to/path> #make a copy of the file i.e. keeps the original
$cp -R <dirname> </where/to/path>
$cp /home/usr/dir/{file1,file2,file3,file4} /home/usr/destination/ #to copy multiple files at once
$cp /path/to/{dir1,dir2,dir3,dir4} /path/to/destination #to copy multiple directories at once
$rsync -avzP <dirname> </where/to/path> #enables you to see the progress and speed of transfer. a=>archive; v=>verbose; z=>compress; P=>progress
$wget <url> -P <path/to/folder> #-P option specifies the path to download the file 
$wget -i <path/to/url_link_file.txt> -P <path/to/destination/folder> #the -i option reads the input url from a text file

$reboot #immediately shutdown the processes running in the background
$sudo shutdown -r +10 && sudo shutdown -r now || sudo shutdown -r +0; sudo shutdown -r <+time/in/min>
$sudo shutdown +60; sudo shutdown -h now
$sudo shutdown -h +15 "The server is going down for maintenance in 15 mins. Please finish your work now."
$sudo shutdown -c #cancel the shutdown operation
$telinit 0; telinit 1; telinit 2; telinit 3; telinit 4; telinit 5; telinit 6 #to change the system run level
$who -r #in order to find the current runlevel
$sudo cat /etc/sudoers #Sudoers allows particular users to run various commands as the root user, without needing the root password.
#By default the sudoers file is configured on Centos 7 to allow all members all users who are members of the wheel group to use sudo to do any thing that root can do. 
$sudo visudo #to edit the /etc/sudoers file

$groups cody #Shows all the groups the specified user is member of
$man <command> #brings up the manual for thatparticular command 
$date
$sudo date MMddhhmmyyyy.ss #modify the date timestamp
$sudo usermod -a -G <groupName> <userName> #appends a group to a particular user group membership
$sudo yum search <packagename>
$sudo dhclient #assigns an ipaddress
$sudo dhclient -r #releases an ipaddress
$getfacl <filename>
$sudo setfacl -m user:sarah:rwx null
$find / -perm /4000 -ls
$find / -perm +4000 -ls #older version
$sudo chgrp <groupName> <fileName>
$sudo chown user.user -R .
$chown [options] new_owner object(s)  #The basic syntax for using chown to change owners is 
$chown alice file1 dir1  #For example, the following would transfer the ownership of a file named file1 and a directory named dir1 to a new owner named alice
$chown bob:group2 file2  #Thus, for example, the following would change the owner of a file named file2 to the user with the user name bob and change its group to group2




#installing updated version of git
sudo apt-add-repository ppa:git-core/ppa
sudo apt-get updated
sudo apt-get install git


# Copies the contents of the id_rsa.pub file to your clipboard
clip < ~/.ssh/id_rsa.pub
pbcopy < ~/.ssh/id_rsa.pub

#install ansible
sudo apt-get install ansible

#Generating ssh key pair
ssh-keygen
echo 'public_key' > authorized_keys
ssh-agent bash
ssh-add .ssh/id_rsa
#ping the machine
ansible -i hosts -u root -m ping all 

#Copying a directory from one linux machine to another linux machine via ssh
scp -r <directory> <username>@<targethost>:<targetdir>
scp <option(-v)> <file_name> <user_name>@<ip_address>:<path_to_file>

#The simplest solution for password-less git access would be to use the git remote set-url command 
#and set an SSH url for the existing repo.
git remote set-url origin git@github.com:name/repo.git

#Centos7 network and firewall configuration
firewall-cmd --permanent --zone=public --add-service=http
firewall-cmd --reload
firewall-cmd --permanent --zone=public --add-port=80/tcp
systemctl status firewalld
systemctl start firewalld
systemctl stop firewalld
systemctl enable firewalld
systemctl disable firewalld

#Connecting to a remote cloud instance via ssh private and public key
ssh-keygen -t rsa -b 2048-f ~/.ssh/azure
ssh -i ~/.ssh/azure <user_name>@<ip_address>

######TAR
#`tar' saves many files together into a single tape or disk archive, and can restore individual files from the archive.
$tar -cf archive.tar foo bar  # Create archive.tar from files foo and bar
$tar -tvf archive.tar   # List all files in archive.tar verbosely
$tar -xf archive.tar    # Extract all files from archive.tar
# -C, --directory=DIR        change to directory DIR
$sudo tar -xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1





##############TROUBLE_SHOOTING###########################################
#ERROR: 
#E: Could not get lock /var/lib/dpkg/lock - open (11 Resource temporarily unavailable)
#E: Unable to lock the administration directory (/var/lib/dpkg/) is another process using it
$ps aux | grep apt   # will catch processes containing the word apt, at least. If you see an apt-get process or an aptitude process that looks stuck, you can try
$kill processnumber
#and if that doesn't work try
$kill -9 processnumber    #This should kill the process and may remove the lock. 

/**
*Killing an apt or aptitude process is harmless unless it is actually in the middle of package installation. In any case, if the process got stuck, 
*you probably don't have a choice but to kill it.
*Killing a dpkg process directly, if present, is not a good idea, because if dpkg is active, it is probably manipulating the package database, 
*and killing it may leave the package database in an inconsistent state; i.e. corrupted.
*Killing an apt-get or aptitude process is in general much safer.
*/

#ERROR: Bridged adapter not connecting to network | Cannot find device "eth0" | Failed to bring up eth0
#The above error was solved by using the command:
$sudo rm -rf /etc/udev/rules.d/70-persistent-net.rules   # The command will remove network persistence rules
$sudo reboot
#auto enp0s3||<interface_name> 
#example: auto eth0
#iface enp0s3 ||<interface_name> inet dhcp || static
#example: iface eth0 inet dhcp
