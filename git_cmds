/**
*Why source control : -backup/archive, versioning/history, undo changes, comparing, collaboration/teamwork, blame/learning moment, isolation of changes, experimentation, context switiching, code review 
*
*Two main types of source control options:
*Centralized: -Free:Subversion, CVS -Commercial: ClearCase, Perforce, Team Foundation Server (TFS) -Requires connection to central server for most operations
*Decentralized/Distributed: Mercurial (Hg), Git, -Most operations are local -Central server not required 
*
*Key Concepts
*Repository contains files, history, config managed by Git
*Four States of git: 1)Working directory, 2)Staging area (precommit holding area), 3)Commit (Git repository history .git), 4)Remote Repository (GitHub)
*Master branch the default branch that git creates when a git repo is created
*  
**/

#Configuring username and email address global environment setting required before starting to use use git 
$git config --global user.name "name"
$git config --global user.email "email_address@example.com"
#Shows all the known configuration from global and user level 
$git config --global --list 

#Cloning a repo and git commands
$git clone <github/clone_url>
$git status
$git add . || git add --all
$git commit -m "the comment goes here"
$git push origin master 

#Configuring notepad++ on bash
#Change to user's home dir or check to make sure you are in the user's home dir
$pwd  
$notepad++ .bash_profile 
#In the .bash_profile file add the following alias command 
alias npp='notepad++.exe -multiInst -nosession' 
#Setup notepad++ as default editor within git
#Check the current global configuration by executing the below command 
$cat ~/.gitconfig
$git config --global core.editor "notepad++.exe -multiInst -nosession"
#To verify 
$git config --global --list 
#to test it out
$git config --global -e 

#How to start a new project with source control without any existing source code 
$git init <name_of_project>
$git status 
$git add <file_name>
$git commit -m "message/comment goes here"
git status 

$git clone <git_url>
$git status 
$git commit -m "add comment here"
$git pull origin master  #always do a git pull origin master before pushing your changes to the remote repository it is a best practice 
#The git push command will push any commit from the local repository to the remote repository by reference name as well as the branch you want to push  
$git push origin master  #origin => is a reference to remote git hub repository and master => is the name of the branch 

#Shortcut the add and commit process into one step. This can only be done with files that are being tracked  
$git commit -am "add comment here"
#A tracked file is any file that Git is aware of and tracking actively. That would be any file that has been committed into the Git repository or any file that has been added to the git index or 
#the git staging area to find out if the file is being tracked by git use the below command 
$git ls-files 

#One of the main point of the staging area is that we build up our changes for the commit i.e. we only want to use the "-a" parameter in the commit command when we don't want to add any more changes to
#that commit. When we have a change that may span multiple files then we definitely want to use the staging area  

#will add all the files recursively 
$git add .  # . means add files recursively 

#To unstage
$git reset HEAD <filename>
#To discard changes in working directory
$git checkout -- <filename>