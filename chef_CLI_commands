/**Versionable - Testable - Repeatable - Collaborative
*A resource statement defines the desired state of the configuration, a resource maps to a "provider" which defines
*the steps to achieve that desired state of configuration.
*An application cookbook typically contains multiple recipes, where each recipe configures one part of the system. The default recipe, default.rb, lists these recipes in 
*the order needed to build your application or service.
*
*In Chef code, you'll often see the ::File notation. The colon :: notation specifies use of the core Ruby File class
*The Chef::Resource::File class also exists to implement the file resource
*
*A wrapper cookbook extends or changes the behavior of a cookbook without forking it 
*
*The <%= %> notation indicates placeholders that are replaced when Chef applies the template
*
*Because Chef loads dependent cookbooks first, the values specified in the current cookbook's attributes file will overwrite any existing attribute values
*
*/

#In the node in client.rb adding the info log level configuration
log_level :info

#Notify and subscribe
notifies :action, 'resource[name]', :timer
subscribes :action 'resource[name]', :timer

#Installing the chef server******************************************************************************************************
$wget
$rpm -Uvh <chef-server-package-name>
$dpkg -i <chef-server-package-name>
$chef-server-ctl reconfigure
#Creating a user in the chef server
$chef-server-ctl user-create username firstname lastname eamail@email.com 'password' --filename <username>-user-rsa
#Creating an organization in the chef server 
$chef-server-ctl org-create <org-short-name> <'ORG fullname'> --association_user <username> --filename <org-short-name>-validator.pem
#Install GUI based interface it is rails application called chef manage
$chef-server-ctl install chef-manage 
$chef-manage-ctl reconfigure
**********************************************************************************************************************************

#Restarting the chef server
Chef-manage-ctl stop
Chef-server-ctl stop
Chef-server-ctl start
Chef-manage-ctl reconfigure
Chef-manage-ctl start


#Downloading the starter kit
$scp chef-starter.zip user@<ipaddress>:~/
$ssh user@<ipaddress>
$su #change to root user
$yum install unzip
$usermod -g wheel user #changing the user@user primary group to wheel group 
$exit
$sudo unzip chef-starter.zip
$rm -rf chef-starter.zip
$sudo knife ssl fetch
$knife bootstrap <ipaddress> --ssh-user <username> -P <password> --sudo -N <fqdn>

#Using git and github with chef-repo
$sudo chown user.user -R .
$git init
$git add .
$git status
#Please tell me who you are RUN the below commands to set your account's default identity
#Omit --global to set the identity only in the repository  
$git config --global user.email "email@example.com"
$git config --global user.name "username"
$git commit -am "Adding chef-repo to git"
$git remote add origin <https://url>
$git push -u origin master  #to push commits made on your local branch to a remote repository. Git push command takes two arguments
$git push <REMOTENAME> <BRANCHNAME>
$echo "#these are all the commands to run" >> README.md #this is to create the readme file later on
$git add README.md #this is to add the readme file creared later on to the github repository
$git add --all
$git add <fileName>
$git push --set-upstream origin <branchname> #pushing changes to the branch created
$git clone <url>
#Creating and switching branches
$git branch <branchName>  #creating a new branch
$git checkout <branchName>  #switching to a different branch
$git branch #to show on what branch you are currently working
<<<<<<< HEAD
$git merge <branchName>  #merging a branch to master branch make sure you are on master branch and after merging do git "push origin master" to see the changes takes affect in the master branch
=======
$git merge <branchName>  #merging a branch to master branch make sure you are on master branch
$git checkout -b <branchName>
>>>>>>> fc69a6a52a73dfcadeffebf177f06d326cbc78a2

#pre convergence items
$chef exec ruby -c /path/to/file
$ruby -c /path/to/file #directly checking for syntax error
$foodcritic /path/to/file
$ruby -c learn.rb && foodcritic learn.rb

#chef generate commands
$chef generate cookbook <cookbooks_dir>/<cookbook_name>
$chef generate recipe cookbooks/apache <name_of_recipe_without_.rb>
$chef generate attribute cookbooks/lamp <name_of_attrbute_without_.rb>   #the name of the default attribute is default.rb 
$chef generate template <path_to_cookbook> <name_of_template_without_.erb>
$sudo chef-client -z -r "recipe[cookbook1],recipe[cookbook2],recipe[cookbook3]"
$chef generate file cookbooks/<cookbook_name> <name_of_file>
$chef-client -W | chef-client --why-run #the -W options runs the chef-client as it would except prevents it from actualling enforcing the configuration on the node
$chef-client -o "recipe[mycookbook@0.1.1]"  #-o RUN_LIST_ITEM, --override-runlist RUN_LIST_ITEM Replace the current run-list with the specified items. This option will not clear the list of cookbooks (and related files) that is cached on the node. This option will not persist node data at the end of the client run.New in Chef Client 12.0



#knife bootstrapping a node
$knife bootstrap <ipaddress> -x <user> -P <password> -N <nodeName> --sudo
$knife bootstrap localhost --ssh-port 2222 --ssh-user vagrant --sudo --identity-file <path/to/file/private_key> -N <name_of_node>
#Knife commands
$knife node list 
$knife node run_list add <nodeName-N> 'recipe[<cookbookname>::<recipename>]' -b 'recipe[<cookbookname>]'
$knife node run_list add <nodeName_N> 'recipe[<cookbookname>::<recipename>]' -a 'recipe[<cookbookname>]'
$knife node run_list remove <nodeName-N> 'recipe[<cookbookname>::<recipename>],recipe[<cookbookname>]'
$knife node run_list add web1 "recipe[workstation],recipe[apache]"
$knife node run_list set load-balancer "recipe[workstation],recipe[apache]"
$knife node run_list set load-balancer "recipe[cookbook_name::recipe_name@cookbook_version]"  #explicitly specify a cookbook version to use in a nodes run_list
$knife cookbook upload <cookbook_name>
$knife cookbook delete <cookbok>@<version>   #to remove specific version of cookbook
$knife role show <roleName>
$knife cookbook create <cookbook_name>
$knife supermarket show httpd | grep latest_version #gets the version information 

#All the knife search command. If no search index is specified the default index is node  #Reference: https://docs.chef.io/knife_search.html 
$knife search 'platform_family:rhel'
$Knife search 'recipes:apache'
$knife search 'recipes:apache\:\:websites'  
$knife search node 'platfor?:centos'
$knife search '*:*' #pulls all the node registered with the chef server 
$knife search '*:*' -a ipaddress 
$knife search role 'role:web' -a run_list 
$knife node show <nodeName> -a run_list, -a ipaddress  #This to show more than one attribute using the -a option 


#Creating roles with knife
$knife role create <rolename>
$knife role edit <rolename>
#uploading roles to chef server
$knife role from file roles/web.rb
$knife node run_list set web1 "role[web]"
$knife environment list
$knife environment show <nameofenvironment>
$knife environment from file <environments_dir>/<env_name.rb>
$knife node environment set <node_name> <env_name>

#The knife ssh command
$knife ssh <ipaddress/fqdn/localhost> 'sudo chef-client' --manual-list --ssh-port 2222 --ssh-user vagrant 
--identity-file C:/users/rumman/devops_projects/chef-training/chef-repo/.vagrant/machines/web1/virtualbox/private_key
$knife ssh "*:*" -x <username> -P <password> "sudo chef-client"
$knife ssh "role:web" -x chef -P chef "sudo chef-client"
$knife ssh "role:web" "sudo chef-client" -x <username> -P <password>
$knife ssh "role:<rolename>" "type command to run" -x <username> -P <password>

#Syntax for knife search index
$knife search INDEX (client, node, role, environment, data_bags) "key:value"
$knife search node "role:web AND recipes:apache"

/**###############################################################################################
*knife tag - A tag is a custom description that is applied to a node  A tag, once applied, can be helpful when managing nodes using knife or when building 
*recipes by providing alternate methods of grouping similar types of information
*The knife tag subcommand is used to apply tags to nodes on a Chef server
*/
#syntax to create tag
$knife tag create NODE_NAME [TAG...]
#To create tags named seattle, portland, and vancouver, enter:
$knife tag create node seattle portland vancouver
#syntax to delete tag - This command does not have any specific options
$knife tag delete NODE_NAME [TAG...]
#To delete tags named denver and phoenix, enter: - Type Y to confirm a deletion
$knife tag delete node denver phoenix
#The list argument to list all of the tags that have been applied to a node - syntax - This command does not have any specific options
$knife tag list [NODE_NAME...]
#To view the tags for a node named devops_prod1, enter:
$knife tag list devops_prod1

###############Knife Reporting and managing the chef server******************************************************************************************************
####To install: chef exec gem install knife-cleanup
####To install: chef exec gem install knife-reporting
$knife cleanup versions  #List all the cookboks are in the chef server but not being used 
$knife cleanup versions -D   #first a backup of the version and then proceed to delete it
$knife cleanup -B (--backup)

$knife runs list <nodeName>   # return a list of chef-client runs by organization or by node
$knife runs list   #returns a list of every chef-client run that took place across every single node in the organization
$knife runs show <runID>  #returns the details for a chef-client run
$knife status -H (--hide-healthy)
$knife status --hide-by-mins <MINS=30>
$r = Get-NodeStatus -Node pld-awurxms01.walgreens.com
$r
$s = Get-RunStatus $r.RunId
$s
$Get-PrettyErrorInfo -ErrorDetails $s.ErrorDetails
$Import-Module ..\..\Documents\WindowsPowerShell\Modules\Functions-ChefHelpers\Functions-ChefHelpers.psm1 -Force
$Get-PrettyErrorInfo -ErrorDetails $s.ErrorDetails

#some ohai commands
ohai
ohai ipaddress
ohai hostname
ohai memory
ohai memory/total
ohai cpu/0/mhz

**********Running Test Kitchen****************************
#Install the docker test kitchen plugin
$chef exec gem install kitchen-docker 

$chef exec gem install kitchen-azurerm
$chef generate cookbook my_cookbook
$vi .kitchen.yml
$kiitchen init #Creates a boilerplate .kitchen.yml which we use to run our tests
$kitchen list  #List all instances docker containers; ec2 instances; virtual machines
$kitchen status  
$Kitchen create  #Creates one or more instances   
$kitchen converge #Converge one or more instances 
$kitchen verify   #Verify one or more instances this runs the test whether the test passed or failed
$kitchen destroy  #Destroy one or more instances 
$kitchen test   #Executes kitchen { destroy, create, converge, verify, destroy }/all-in-one
$kitchen login  #login to one instances
$kitchen help   #Provides a list of available kitchen commands 
$kitchen exec -c whoami #prints the name of the current user
$kitchen exec -c 'ip a s'  #if the command is not a single word 'enclose it within single quote'
$vi test/smoke/default/default_test.rb


#generate secret keys
$ openssl rand -base64 512 | tr -d '\r\n' > secret-key
#creating encrypted data bag
$knife data bag create secret-users --secret-file secret-key 
#uploading encrypted data bag item
$knife data bag from file secret-users data_bags/users/julia.json --secret-file secret-key
#decrypt encrypted data bag items
$knife data bag show secret-users julia --secret-file secret-key


#******Adding soft dependencies of cookbooks********************************************
source 'https://supermarket.chef.io'  #in the Berksfile file
metadata 
#
# Kitchen ONLY includes, comment out before upload
#
cookbook 'wag_sshd', path: '../wag_sshd'
cookbook 'wag_access_sysadmin', path: '../wag_access_sysadmin'
cookbook 'wag_ldap_integration', path: '../wag_ldap_integration'
cookbook 'nsswitch', path: '../nsswitch'
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
suites:            #in the .kitchen.yml file
  - name: default
    run_list:
      - recipe[wag_access_tivoli::default]
      - recipe[wag_sshd::default]
      - recipe[wag_ldap_integration::default]
    verifier:
      inspec_tests:
        - test/smoke/default
    attributes:
	
****************************************************************************************	
	
/**
*Adding an ip address and proxy server url variable to a test instance in the kitchen.yml file
*/
driver:
  name: vagrant
  network:
     - ["private_network", {ip: "192.168.34.34"}]
  driver_config:
  https_proxy: http://corppac.walgreens.com:8080
  http_proxy: http://corppac.walgreens.com:8080
	
	
	
**********************************TroubleShootingBootStrappedNodes********************************************
###In the /etc/chef/client.rb #add the following 
node_name "the name of the node"
ssl_ca_file "/etc/chef/trusted_certs/	
	
	
	
	
	
	
	
	
	
	
	
****************Ruby code for recipes examples*******************************************
#String interpolation and inserting node attributes inside a recipe
node['ipaddress']
node['memory']['total']
apple_count = 4
puts "I have #{apple_count} apples"

file '/etc/motd' do
  content "This computer is the property of RAR
  HOSTNAME: #{node['hostname']}
  IPADDRESS: #{node['ipaddress']}
  CPU: #{node['cpu']['0']['mhz']}
  MEMORY: #{node['memory']['total']}
"
end


#Explicitly defining the name of the service to take the action on by assign the name of the service to a variable

service 'apache' do
    service_name 'httpd'
    action [:enable, :start]
end

#Installing multiple package at one time 

%w{httpd vim tree emacs}.each do |pkg|
    package pkg do
	   action :upgrade
	end
end
#Another way of installing multiple package at one time

['mysql-server','mysql-common','mysql-client'].each do |pkg|
    package pkg do
	  action :install
	end
end 

#NOT_IF & ONLY_IF Guards Statement
#The execute resource type by default is not idempotent so we can make it idempotent 
#by defiining the only_if and not_if guard statement

#NOT_IF -prevents a resource from executing when a condition returns true

execute 'not-if-example' do
    command '/usr/bin/echo "10.0.2.1 webserver01" >> /etc/hosts
	not_if 'test -z $(grep "10.0.2.1 webserver01" /etc/hosts)'
	not_if { ::File.exists?('/etc/motd') } #using ruby class and method to test for file
end 

#ONLY_IF -Allow a resource to execute only if the condition true

execute 'only-if-example' do
    command '/usr/bin/echo "10.0.2.1 webserver01" >> /etc/hosts'
    only_if 'test -z $(grep "10.0.2.1 webserver01" /etc/hosts)'
    only_if { ::File.exists?('/etc/motd') } #using ruby class and method to test for file
end
#****************learn.rb************************************************************
package 'apache' do
   package_name 'httpd'
end

service 'httpd' do
  action [:enable, :start]
end

file '/var/www/index.html' do
  action :delete
end

file '/var/www/html/index.html' do
  content 'Hello World!'
  mode '0755'
  owner 'root'
  group 'apache'
end

execute 'command-test1' do
  command 'echo blah >> /etc/motd'
  only_if { ::File.exists?('/etc/motd') }
end

file '/etc/motd' do
  content "Welcome to my server!"
end

#execute 'command-test' do
#  command 'echo blah >> /etc/motd'
#  only_if 'test -r /etc/motd'
#end


#****************************Installing/Tomcat/Recipe******************
#
# Cookbook:: tomcat
# Recipe:: default
#
# Copyright:: 2017, The Authors, All Rights Reserved.
package 'java-1.7.0-openjdk-devel' do
        action :install
end

#sudo groupadd tomcat
group 'tomcat' do
    action :create
end

#sudo useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat
user 'tomcat' do
    manage_home false 
    shell '/bin/nologin'
    group 'tomcat'
    home '/opt/tomcat'
end 

execute 'wget http://apache.mirrors.ionfish.org/tomcat/tomcat-8/v8.5.14/bin/apache-tomcat-8.5.14.tar.gz' do
    not_if { ::File.exists?('apache-tomcat-8.5.14.tar.gz') }
end

#remote_file 'apache-tomcat-8.0.43.tar.gz' do
      #source 'http://apache.mirrors.ionfish.org/tomcat/tomcat-8/v8.0.43/bin'
#end

directory '/opt/tomcat' do
    action :create
    group 'tomcat'
end

execute 'tar xvf apache-tomcat-8.5.14*tar.gz -C /opt/tomcat --strip-components=1'
#execute 'extracting-tar' do
     #command 'gunzip apache-tomcat-8.5.14*tar.gz'
     #command 'tar xvf apache-tomcat-8.5.14*tar -C /opt/tomcat --strip-components=1'
#end
 
 execute 'chgrp -R tomcat /opt/tomcat/conf*'

 directory '/opt/tomcat/conf' do
     mode '0070'
 end 

execute 'chmod g+r /opt/tomcat/conf/*'

execute 'chown -R tomcat /opt/tomcat/webapps/ /opt/tomcat/work/ /opt/tomcat/temp/ /opt/tomcat/logs/'

template '/etc/systemd/system/tomcat.service' do 
    source 'tomcat.service.erb'
end

execute 'systemctl daemon-reload'

service 'tomcat' do
    action [:enable, :start]
end
**************************************************************************************************************************
  describe file('/etc/sudoers') do
  it { should be_mode 440 }
end

